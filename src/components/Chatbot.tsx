import { useState } from 'react';\nimport { Chat, ChatMessage, initialChat, initialMessage } from '../lib/chat';\nimport { OpenAI } from 'openai';\n\ninterface ChatbotProps {\n  apiKey: string;\n}\n\nconst Chatbot = ({ apiKey }: ChatbotProps) => {\n  const [chat, setChat] = useState<Chat>(initialChat);\n  const [currentMessageText, setCurrentMessageText] = useState('');\n  const openai = new OpenAI(apiKey);\n\n  const handleMessageInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCurrentMessageText(e.target.value);\n  };\n\n  const sendMessage = async (messageText: string, isUser: boolean = true) => {\n    const newMessage: ChatMessage = { ...initialMessage, text: messageText, isUser };\n    setChat((prevState) => ({ ...prevState, messages: [...prevState.messages, newMessage] }));\n\n    if (isUser) {\n      const prompt = createOpenAIPrompt(chat);\n      const response = await openai.Completions.create({ prompt });\n      const aiResponseText = response.choices[0].text;\n      sendMessage(aiResponseText, false);\n    }\n  };\n\n  const handleSubmitMessage = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (currentMessageText.trim()) {\n      sendMessage(currentMessageText);\n      setCurrentMessageText('');\n    }\n  };\n\n  return (\n    <div>\n      {/* Render chat messages here */}\n      <form onSubmit={handleSubmitMessage}>\n        <input type='text' value={currentMessageText} onChange={handleMessageInputChange} />\n        <button type='submit'>Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chatbot;